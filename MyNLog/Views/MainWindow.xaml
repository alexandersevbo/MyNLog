<Window x:Class="MyNLog.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:v="clr-namespace:MyNLog.Views"
        xmlns:c="clr-namespace:MyNLog.Converters"
        xmlns:local="clr-namespace:MyNLog"
        xmlns:misc="clr-namespace:WPF.Misc"
        xmlns:misc2="clr-namespace:MyNLog.Misc"
        xmlns:h="clr-namespace:WPF.TextHighlighter"
        xmlns:prism="http://prismlibrary.com/"
        prism:ViewModelLocator.AutoWireViewModel="True"
        mc:Ignorable="d" d:DataContext="{StaticResource MainWindowViewModelDummy}"
        Style="{StaticResource ChromeWindow}"
        WindowStartupLocation="CenterScreen"
        Title="MyNLog" Height="350" Width="650">
    <Window.Resources>
        <h:HighlightConverter x:Key="ExceptionHighlighter">
            <h:HighlightConverter.Resources>
                <Style TargetType="{x:Type Run}" x:Key="Main">
                    <Setter Property="Foreground" Value="{StaticResource TextMainBrush}"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="Namespace">
                    <Setter Property="Foreground" Value="{StaticResource TextDisabledBrush}"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="Generic">
                    <Setter Property="Foreground" Value="#FF2DB671"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="MethodName">
                    <Setter Property="Foreground" Value="#FFFFFF9A"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="TypeName">
                    <Setter Property="Foreground" Value="#FFC1E671"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="ArgName">
                    <Setter Property="Foreground" Value="#FFA2B7DC"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="Path">
                    <Setter Property="Foreground" Value="{StaticResource TextDisabledBrush}"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="Rownum">
                    <Setter Property="Foreground" Value="SandyBrown"/>
                </Style>
            </h:HighlightConverter.Resources>
            <h:MonoHighlighter Style="{StaticResource Main}"/>
            <h:RegexHighlighter Pattern="\s{3}[^\d\s]+\s(?&lt;namespace>[\w.]+\.)(?&lt;generic>&lt;[\w\d\s,]+>)*(?&lt;method>\w+\((?:\w+\s\w+,?\s?)*\))\s[^\d\s]+\s(?&lt;path>[\w:\\.]+:)[^\d\s]+\s(?&lt;rownum>\d+)">
                <h:HighlighterDictionary>
                    <h:RegexHighlighter x:Key="namespace" Pattern="(?&lt;first>[\w.]+.)\.(?&lt;last>[\w]+.)">
                        <h:HighlighterDictionary>
                            <h:MonoHighlighter x:Key="first" Style="{StaticResource Namespace}"/>
                            <h:MonoHighlighter x:Key="last" Style="{StaticResource Main}"/>
                        </h:HighlighterDictionary>
                    </h:RegexHighlighter>
                    <h:RegexHighlighter x:Key="generic" Pattern="(?&lt;openbr>&lt;)(?&lt;args>[\w\d\s,]+)(?&lt;closebr>>)">
                        <h:HighlighterDictionary>
                            <h:MonoHighlighter x:Key="openbr" Style="{StaticResource Main}"/>
                            <h:RegexHighlighter x:Key="args" Pattern="(?&lt;argtype>[\w\d]+)(?:, |$)">
                                <h:HighlighterDictionary>
                                    <h:MonoHighlighter x:Key="argtype" Style="{StaticResource Generic}"/>
                                </h:HighlighterDictionary>
                            </h:RegexHighlighter>
                            <h:MonoHighlighter x:Key="closebr" Style="{StaticResource Main}"/>
                        </h:HighlighterDictionary>
                    </h:RegexHighlighter>
                    <h:RegexHighlighter x:Key="method" Pattern="(?&lt;methodname>\w+)(?&lt;openbr>\()(?&lt;args>[\w\d\s,]*)(?&lt;closebr>\))">
                        <h:HighlighterDictionary>
                            <h:MonoHighlighter x:Key="methodname" Style="{StaticResource MethodName}"/>
                            <h:MonoHighlighter x:Key="openbr" Style="{StaticResource Main}"/>
                            <h:RegexHighlighter x:Key="args" Pattern="(?&lt;argtype>[\w\d]+)\s(?&lt;argname>[\w\d]+)(?:, |$)">
                                <h:HighlighterDictionary>
                                    <h:MonoHighlighter x:Key="argtype" Style="{StaticResource TypeName}"/>
                                    <h:MonoHighlighter x:Key="argname" Style="{StaticResource ArgName}"/>
                                </h:HighlighterDictionary>
                            </h:RegexHighlighter>
                            <h:MonoHighlighter x:Key="closebr" Style="{StaticResource Main}"/>
                        </h:HighlighterDictionary>
                    </h:RegexHighlighter>
                    <h:MonoHighlighter x:Key="path" Style="{StaticResource Path}"/>
                    <h:MonoHighlighter x:Key="rownum" Style="{StaticResource Rownum}"/>
                </h:HighlighterDictionary>
            </h:RegexHighlighter>
        </h:HighlightConverter>
        <h:HighlightConverter x:Key="StackTraceConverter">
            <h:HighlightConverter.Resources>
                <Style TargetType="{x:Type Run}" x:Key="Main">
                    <Setter Property="Foreground" Value="{StaticResource TextDisabledBrush}"/>
                </Style>
                <Style TargetType="{x:Type Run}" x:Key="MethodName">
                    <Setter Property="Foreground" Value="#FFFFFF9A"/>
                </Style>
            </h:HighlightConverter.Resources>
            <h:MonoHighlighter Style="{StaticResource Main}"/>
            <h:RegexHighlighter Pattern="in [\w\d`.]*\.(?&lt;method>[\w\d]+)">
                <h:HighlighterDictionary>
                    <h:MonoHighlighter x:Key="method" Style="{StaticResource MethodName}"/>
                </h:HighlighterDictionary>
            </h:RegexHighlighter>
        </h:HighlightConverter>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Key="C" Modifiers="Control" Command="Open"/>
        <KeyBinding Key="S" Modifiers="Control" Command="SaveAs"/>
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0"
              HorizontalAlignment="Left"
              Margin="4,0"
              SnapsToDevicePixels="True"
              WindowChrome.IsHitTestVisibleInChrome="True"
              RenderOptions.EdgeMode="Aliased">
            <MenuItem Header="_File">
                <MenuItem Header="_Open log file" IsEnabled="False" Command="{DynamicResource OpenLogFileCommand}"/>
                <MenuItem Header="Open _Nlog config"
                          Command="{DynamicResource OpenNlogConfigCommand}"
                          misc:PathDecorator.PathStyle="{StaticResource FolderOpen}"
                          misc:PathDecorator.PathWidth="16"
                          misc:PathDecorator.PathHeight="16"/>
                <MenuItem Header="_Close log file" 
                          Command="{DynamicResource CloseLogCommand}"
                          misc:PathDecorator.PathStyle="{StaticResource Disconnect}"
                          misc:PathDecorator.PathWidth="16"
                          misc:PathDecorator.PathHeight="16"/>
                <Separator/>
                <MenuItem Header="Test log" Command="{DynamicResource TestLogCommand}"/>
                <Separator/>
                <MenuItem Header="_Exit"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Copy" InputGestureText="Ctrl+C"
                          misc:PathDecorator.PathStyle="{StaticResource Copy}"
                          misc:PathDecorator.PathWidth="16"
                          misc:PathDecorator.PathHeight="16"/>
                <MenuItem Header="C_lear"
                          misc:PathDecorator.PathStyle="{StaticResource LogRemove}"
                          misc:PathDecorator.PathWidth="16"
                          misc:PathDecorator.PathHeight="16"/>
                <MenuItem Header="C_ollapse all"
                          misc:PathDecorator.PathStyle="{StaticResource Collapse}"
                          misc:PathDecorator.PathWidth="16"
                          misc:PathDecorator.PathHeight="16"/>
            </MenuItem>
            <MenuItem Header="_Network">
                <MenuItem Header="Connect" IsEnabled="False"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_Check for Updates..."/>
                <Separator />
                <MenuItem Header="_About"/>
            </MenuItem>
        </Menu>
        <Border Grid.Row="1" Background="{StaticResource BgrDarkBrush}" Padding="2">
            <DockPanel LastChildFill="True">
                <DockPanel.Resources>
                    <Style TargetType="{x:Type Separator}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Width="2" Margin="2,4" Fill="{StaticResource PathDisabledBrush}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </DockPanel.Resources>
                <Button Style="{StaticResource PathButton}" Margin="2,0"
                        Command="{DynamicResource OpenNlogConfigCommand}"
                        misc:PathDecorator.PathStyle="{StaticResource FolderOpen}"
                        misc:PathDecorator.PathWidth="20"
                        misc:PathDecorator.PathHeight="20"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Button Style="{StaticResource PathButton}" Margin="2,0"
                        Command="{DynamicResource CloseLogCommand}"
                        misc:PathDecorator.PathStyle="{StaticResource Disconnect}"
                        misc:PathDecorator.PathWidth="20"
                        misc:PathDecorator.PathHeight="20"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Separator/>
                <Button Style="{StaticResource PathButton}" Margin="2,0"
                        Command="{Binding ClearLogCommand}"
                        misc:PathDecorator.PathStyle="{StaticResource LogRemove}"
                        misc:PathDecorator.PathWidth="20"
                        misc:PathDecorator.PathHeight="20"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Separator/>
                <Button Style="{StaticResource PathButton}" Margin="2,0"
                        Command="{Binding CopySelectedCommand}"
                        CommandParameter="{Binding SelectedItems, ElementName=LogItemsListBox}"
                        misc:PathDecorator.PathStyle="{StaticResource Copy}"
                        misc:PathDecorator.PathWidth="20"
                        misc:PathDecorator.PathHeight="20"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Button Style="{StaticResource PathButton}" Margin="2,0"
                        Command="{Binding CollapseAllCommand}"
                        misc:PathDecorator.PathStyle="{StaticResource Collapse}"
                        misc:PathDecorator.PathWidth="20"
                        misc:PathDecorator.PathHeight="20"
                        Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Separator/>
                <ToggleButton x:Name="FilterPopupButton" Style="{StaticResource PathToggleButton}" Margin="2,0"
                              IsEnabled="False"
                              misc:PathDecorator.PathStyle="{StaticResource FilterMenu}"
                              misc:PathDecorator.PathWidth="20"
                              misc:PathDecorator.PathHeight="20"
                              Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                <Popup IsOpen="{Binding IsChecked, ElementName=FilterPopupButton}"
                       StaysOpen="True"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=FilterPopupButton}"
                       Style="{StaticResource MenuPopup}"
                       MaxWidth="150"
                       PopupAnimation="Scroll"
                       AllowsTransparency="True">
                    <Border SnapsToDevicePixels="True"
                            Margin="5,0,5,5"
                            Background="{StaticResource MenuItemPopupBackgroundBrush}">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="3" BlurRadius="8" Opacity="0.8" Direction="270"/>
                        </Border.Effect>
                        <Grid Width="150" Height="100">

                        </Grid>
                    </Border>
                </Popup>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" MaxWidth="300"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Margin="2,2" Text="{Binding FilterText}">
                        <i:Interaction.Behaviors>
                            <local:TextBoxEnterKeyUpdateBehavior />
                        </i:Interaction.Behaviors>
                    </TextBox>
                </Grid>
            </DockPanel>
        </Border>
        <ListBox x:Name="LogItemsListBox" Grid.Row="2" ItemsSource="{Binding LogItems}"
                 Grid.IsSharedSizeScope="True"
                 Background="{StaticResource BgrAltDarkBrush}"
                 BorderThickness="0"
                 ScrollViewer.CanContentScroll="False"
                 ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                 misc2:ListBoxBehavior.ScrollOnNewItem="True"
                 SelectionMode="Extended">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}, Mode=FindAncestor}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="22"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="TimeGroup"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="LevelGroup"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="LoggerGroup" x:Name="GridLoggerGroup"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="MoreInfoButton" IsChecked="{Binding Expanded}"
                                      Style="{StaticResource PathStrokeToggleButton}"
                                      misc:PathDecorator.PathStyle="{StaticResource RightTick}"
                                      misc:PathDecorator.PathThickness="1"
                                      misc:PathDecorator.PathWidth="12"
                                      misc:PathDecorator.PathHeight="12"
                                      VerticalContentAlignment="Top"
                                      Background="Transparent" Padding="1,2">
                            <misc:PathDecorator.PathRenderTransform>
                                <RotateTransform x:Name="PathTransform" Angle="0"/>
                            </misc:PathDecorator.PathRenderTransform>
                            <ToggleButton.Triggers>
                                <EventTrigger RoutedEvent="ToggleButton.Checked">
                                    <BeginStoryboard>
                                        <Storyboard Timeline.DesiredFrameRate="60">
                                            <DoubleAnimation Storyboard.TargetName="PathTransform" Storyboard.TargetProperty="Angle"
                                                                 From="0" To="90" AutoReverse="False" Duration="0:0:0.2" 
                                                                 DecelerationRatio="1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                                    <BeginStoryboard>
                                        <Storyboard Timeline.DesiredFrameRate="60">
                                            <DoubleAnimation Storyboard.TargetName="PathTransform" Storyboard.TargetProperty="Angle"
                                                                 From="90" To="0" AutoReverse="False" Duration="0:0:0.2" 
                                                                 DecelerationRatio="1"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ToggleButton.Triggers>
                        </ToggleButton>
                        <TextBlock Grid.Column="2" Text="{Binding Time, StringFormat=yyyy-MM-dd HH:mm:ss.ffff}"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"/>
                        <TextBlock Grid.Column="4" Text="{Binding Level}"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"/>
                        <TextBlock Grid.Column="6" HorizontalAlignment="Right"
                                   Text="{Binding Logger, Converter={StaticResource LogItemLoggerCropperConverter}, StringFormat=\{0\}:}"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"
                                   Visibility="{Binding IsChecked, Converter={StaticResource ReverseBooleanToVisibilityConverter}, ElementName=MoreInfoButton}"/>
                        <TextBlock Grid.Column="8" Text="{Binding Message}" TextWrapping="Wrap"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"
                                   Visibility="{Binding IsChecked, Converter={StaticResource ReverseBooleanToVisibilityConverter}, ElementName=MoreInfoButton}"/>
                        <StackPanel Orientation="Horizontal" Grid.Column="6" Grid.ColumnSpan="3"
                                    Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MoreInfoButton}">
                            <TextBlock Grid.Column="6" Text="{Binding Logger, StringFormat=\{0\}:}"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"/>
                            <TextBlock Grid.Column="8" Text="{Binding Message}" Margin="4,0,0,0" TextWrapping="Wrap"
                                   Foreground="{Binding Level, Converter={StaticResource LogLevelColorSelector}}"/>
                        </StackPanel>

                        <Grid Grid.ColumnSpan="9" Grid.Row="1"
                              Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MoreInfoButton}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="42"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <StackPanel>
                                <StackPanel.Visibility>
                                    <Binding Path="Exception">
                                        <Binding.Converter>
                                            <c:ChainConverter>
                                                <c:IsNotNullConverter/>
                                                <BooleanToVisibilityConverter/>
                                            </c:ChainConverter>
                                        </Binding.Converter>
                                    </Binding>
                                </StackPanel.Visibility>
                                <RadioButton Content="stack" Margin="2" IsChecked="True" x:Name="StackBtn" Style="{StaticResource ToggleRadioButton}"/>
                                <RadioButton Content="excep" Margin="2" Style="{StaticResource ToggleRadioButton}"/>
                            </StackPanel>
                            <TextBlock Grid.Column="1" TextWrapping="Wrap"
                                       Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=StackBtn}"
                                       h:TextBlockInliner.Inlines="{Binding StackTrace, Converter={StaticResource StackTraceConverter}}"/>
                            <TextBlock Grid.Column="1" TextWrapping="Wrap"
                                       Visibility="{Binding IsChecked, Converter={StaticResource ReverseBooleanToVisibilityConverter}, ElementName=StackBtn}"
                                       h:TextBlockInliner.Inlines ="{Binding Exception, Converter={StaticResource ExceptionHighlighter}}"/>
                        </Grid>
                    </Grid>
                    <!--<DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Level}" Value="Error">
                            <Setter TargetName="MoreInfoButton" Property="IsChecked" Value="True"/>
                            <Setter TargetName="StackBtn" Property="IsChecked" Value="False"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>-->
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </Grid>
</Window>
